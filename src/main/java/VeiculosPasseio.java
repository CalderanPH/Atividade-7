package main.java;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class VeiculosPasseio extends JFrame {
    private JPanel painelPasseio;
    private JButton cadastrarButton;
    private JButton consultarExcluirPelaPlacaButton;
    private JButton imprimirExcluirTodosButton;
    private JButton sairButton;
    private JTextArea txt1;


    public VeiculosPasseio(String title) {
        super(title);

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setContentPane(painelPasseio);
        this.pack();


        cadastrarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cadastrar();
            }
        });
        consultarExcluirPelaPlacaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                consultar();
            }
        });
        imprimirExcluirTodosButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                imprimirExluir();
            }
        });
        sairButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sair();
            }
        });
    }


    public void cadastrar() {
        JFrame jan1 = new CadPasseio("Cadastro Veículos de Passeio");
        jan1.setSize(450, 400);
        jan1.setVisible(true);
    }

    public void consultar() {
        JFrame jan2 = new ConsultarDelete("Consultar ou Exluir veículo pela placa");
        jan2.setSize(450, 400);
        jan2.setVisible(true);
    }

    public void imprimirExluir() {
        JFrame jan3 = new ImprimirExcluir("Imprimir ou Excluir todos os veículos");
        jan3.setSize(450, 400);
        jan3.setVisible(true);
    }

    public void sair() {
        int resp = JOptionPane.showConfirmDialog(null, "Deseja sair?", "Sair", JOptionPane.YES_NO_CANCEL_OPTION);
        if (resp == 0) {
            this.dispose();
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        painelPasseio = new JPanel();
        painelPasseio.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        painelPasseio.setBackground(new Color(-13684945));
        Font painelPasseioFont = this.$$$getFont$$$("Courier New", -1, 36, painelPasseio.getFont());
        if (painelPasseioFont != null) painelPasseio.setFont(painelPasseioFont);
        painelPasseio.setForeground(new Color(-3288878));
        cadastrarButton = new JButton();
        cadastrarButton.setForeground(new Color(-16382458));
        cadastrarButton.setText("Cadastrar");
        painelPasseio.add(cadastrarButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        consultarExcluirPelaPlacaButton = new JButton();
        consultarExcluirPelaPlacaButton.setForeground(new Color(-16382458));
        consultarExcluirPelaPlacaButton.setText("Consultar / Excluir pela Placa");
        painelPasseio.add(consultarExcluirPelaPlacaButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imprimirExcluirTodosButton = new JButton();
        imprimirExcluirTodosButton.setForeground(new Color(-16382458));
        imprimirExcluirTodosButton.setText("Imprimir / Excluir todos");
        painelPasseio.add(imprimirExcluirTodosButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sairButton = new JButton();
        sairButton.setForeground(new Color(-16382458));
        sairButton.setText("Sair");
        painelPasseio.add(sairButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txt1 = new JTextArea();
        txt1.setBackground(new Color(-13684945));
        Font txt1Font = this.$$$getFont$$$("Courier New", -1, 20, txt1.getFont());
        if (txt1Font != null) txt1.setFont(txt1Font);
        txt1.setForeground(new Color(-1));
        txt1.setText("Escolha uma opção a baixo.");
        painelPasseio.add(txt1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return painelPasseio;
    }
}
